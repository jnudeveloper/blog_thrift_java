/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.blog.thrift.domain;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-01-15")
public class TQuery implements org.apache.thrift.TBase<TQuery, TQuery._Fields>, java.io.Serializable, Cloneable, Comparable<TQuery> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TQuery");

  private static final org.apache.thrift.protocol.TField WHERE_FIELD_DESC = new org.apache.thrift.protocol.TField("where", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ORDER_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("orderBy", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField SELECT_FIELD_DESC = new org.apache.thrift.protocol.TField("select", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField SELECT_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("selectOption", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DISTINCT_FIELD_DESC = new org.apache.thrift.protocol.TField("distinct", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField FROM_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromTable", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField GROUP_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("groupBy", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField JOIN_FIELD_DESC = new org.apache.thrift.protocol.TField("join", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField HAVING_FIELD_DESC = new org.apache.thrift.protocol.TField("having", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField UNIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("unions", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TQueryStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TQueryTupleSchemeFactory();

  public java.lang.String where; // required
  public int limit; // required
  public int offset; // required
  public java.util.Map<java.lang.String,java.lang.String> orderBy; // required
  public java.util.List<java.lang.String> select; // required
  public java.lang.String selectOption; // required
  public boolean distinct; // required
  public java.util.List<java.lang.String> fromTable; // required
  public java.util.List<java.lang.String> groupBy; // required
  public java.lang.String join; // required
  public java.lang.String having; // required
  public java.lang.String unions; // required
  public java.util.Map<java.lang.String,java.lang.String> params; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WHERE((short)1, "where"),
    LIMIT((short)2, "limit"),
    OFFSET((short)3, "offset"),
    ORDER_BY((short)4, "orderBy"),
    SELECT((short)5, "select"),
    SELECT_OPTION((short)6, "selectOption"),
    DISTINCT((short)7, "distinct"),
    FROM_TABLE((short)8, "fromTable"),
    GROUP_BY((short)9, "groupBy"),
    JOIN((short)10, "join"),
    HAVING((short)11, "having"),
    UNIONS((short)12, "unions"),
    PARAMS((short)13, "params");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WHERE
          return WHERE;
        case 2: // LIMIT
          return LIMIT;
        case 3: // OFFSET
          return OFFSET;
        case 4: // ORDER_BY
          return ORDER_BY;
        case 5: // SELECT
          return SELECT;
        case 6: // SELECT_OPTION
          return SELECT_OPTION;
        case 7: // DISTINCT
          return DISTINCT;
        case 8: // FROM_TABLE
          return FROM_TABLE;
        case 9: // GROUP_BY
          return GROUP_BY;
        case 10: // JOIN
          return JOIN;
        case 11: // HAVING
          return HAVING;
        case 12: // UNIONS
          return UNIONS;
        case 13: // PARAMS
          return PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LIMIT_ISSET_ID = 0;
  private static final int __OFFSET_ISSET_ID = 1;
  private static final int __DISTINCT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WHERE, new org.apache.thrift.meta_data.FieldMetaData("where", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_BY, new org.apache.thrift.meta_data.FieldMetaData("orderBy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SELECT, new org.apache.thrift.meta_data.FieldMetaData("select", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SELECT_OPTION, new org.apache.thrift.meta_data.FieldMetaData("selectOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISTINCT, new org.apache.thrift.meta_data.FieldMetaData("distinct", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FROM_TABLE, new org.apache.thrift.meta_data.FieldMetaData("fromTable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.GROUP_BY, new org.apache.thrift.meta_data.FieldMetaData("groupBy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.JOIN, new org.apache.thrift.meta_data.FieldMetaData("join", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HAVING, new org.apache.thrift.meta_data.FieldMetaData("having", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNIONS, new org.apache.thrift.meta_data.FieldMetaData("unions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TQuery.class, metaDataMap);
  }

  public TQuery() {
  }

  public TQuery(
    java.lang.String where,
    int limit,
    int offset,
    java.util.Map<java.lang.String,java.lang.String> orderBy,
    java.util.List<java.lang.String> select,
    java.lang.String selectOption,
    boolean distinct,
    java.util.List<java.lang.String> fromTable,
    java.util.List<java.lang.String> groupBy,
    java.lang.String join,
    java.lang.String having,
    java.lang.String unions,
    java.util.Map<java.lang.String,java.lang.String> params)
  {
    this();
    this.where = where;
    this.limit = limit;
    setLimitIsSet(true);
    this.offset = offset;
    setOffsetIsSet(true);
    this.orderBy = orderBy;
    this.select = select;
    this.selectOption = selectOption;
    this.distinct = distinct;
    setDistinctIsSet(true);
    this.fromTable = fromTable;
    this.groupBy = groupBy;
    this.join = join;
    this.having = having;
    this.unions = unions;
    this.params = params;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQuery(TQuery other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetWhere()) {
      this.where = other.where;
    }
    this.limit = other.limit;
    this.offset = other.offset;
    if (other.isSetOrderBy()) {
      java.util.Map<java.lang.String,java.lang.String> __this__orderBy = new java.util.HashMap<java.lang.String,java.lang.String>(other.orderBy);
      this.orderBy = __this__orderBy;
    }
    if (other.isSetSelect()) {
      java.util.List<java.lang.String> __this__select = new java.util.ArrayList<java.lang.String>(other.select);
      this.select = __this__select;
    }
    if (other.isSetSelectOption()) {
      this.selectOption = other.selectOption;
    }
    this.distinct = other.distinct;
    if (other.isSetFromTable()) {
      java.util.List<java.lang.String> __this__fromTable = new java.util.ArrayList<java.lang.String>(other.fromTable);
      this.fromTable = __this__fromTable;
    }
    if (other.isSetGroupBy()) {
      java.util.List<java.lang.String> __this__groupBy = new java.util.ArrayList<java.lang.String>(other.groupBy);
      this.groupBy = __this__groupBy;
    }
    if (other.isSetJoin()) {
      this.join = other.join;
    }
    if (other.isSetHaving()) {
      this.having = other.having;
    }
    if (other.isSetUnions()) {
      this.unions = other.unions;
    }
    if (other.isSetParams()) {
      java.util.Map<java.lang.String,java.lang.String> __this__params = new java.util.HashMap<java.lang.String,java.lang.String>(other.params);
      this.params = __this__params;
    }
  }

  public TQuery deepCopy() {
    return new TQuery(this);
  }

  @Override
  public void clear() {
    this.where = null;
    setLimitIsSet(false);
    this.limit = 0;
    setOffsetIsSet(false);
    this.offset = 0;
    this.orderBy = null;
    this.select = null;
    this.selectOption = null;
    setDistinctIsSet(false);
    this.distinct = false;
    this.fromTable = null;
    this.groupBy = null;
    this.join = null;
    this.having = null;
    this.unions = null;
    this.params = null;
  }

  public java.lang.String getWhere() {
    return this.where;
  }

  public TQuery setWhere(java.lang.String where) {
    this.where = where;
    return this;
  }

  public void unsetWhere() {
    this.where = null;
  }

  /** Returns true if field where is set (has been assigned a value) and false otherwise */
  public boolean isSetWhere() {
    return this.where != null;
  }

  public void setWhereIsSet(boolean value) {
    if (!value) {
      this.where = null;
    }
  }

  public int getLimit() {
    return this.limit;
  }

  public TQuery setLimit(int limit) {
    this.limit = limit;
    setLimitIsSet(true);
    return this;
  }

  public void unsetLimit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  /** Returns true if field limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  public void setLimitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
  }

  public int getOffset() {
    return this.offset;
  }

  public TQuery setOffset(int offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
  }

  public int getOrderBySize() {
    return (this.orderBy == null) ? 0 : this.orderBy.size();
  }

  public void putToOrderBy(java.lang.String key, java.lang.String val) {
    if (this.orderBy == null) {
      this.orderBy = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.orderBy.put(key, val);
  }

  public java.util.Map<java.lang.String,java.lang.String> getOrderBy() {
    return this.orderBy;
  }

  public TQuery setOrderBy(java.util.Map<java.lang.String,java.lang.String> orderBy) {
    this.orderBy = orderBy;
    return this;
  }

  public void unsetOrderBy() {
    this.orderBy = null;
  }

  /** Returns true if field orderBy is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderBy() {
    return this.orderBy != null;
  }

  public void setOrderByIsSet(boolean value) {
    if (!value) {
      this.orderBy = null;
    }
  }

  public int getSelectSize() {
    return (this.select == null) ? 0 : this.select.size();
  }

  public java.util.Iterator<java.lang.String> getSelectIterator() {
    return (this.select == null) ? null : this.select.iterator();
  }

  public void addToSelect(java.lang.String elem) {
    if (this.select == null) {
      this.select = new java.util.ArrayList<java.lang.String>();
    }
    this.select.add(elem);
  }

  public java.util.List<java.lang.String> getSelect() {
    return this.select;
  }

  public TQuery setSelect(java.util.List<java.lang.String> select) {
    this.select = select;
    return this;
  }

  public void unsetSelect() {
    this.select = null;
  }

  /** Returns true if field select is set (has been assigned a value) and false otherwise */
  public boolean isSetSelect() {
    return this.select != null;
  }

  public void setSelectIsSet(boolean value) {
    if (!value) {
      this.select = null;
    }
  }

  public java.lang.String getSelectOption() {
    return this.selectOption;
  }

  public TQuery setSelectOption(java.lang.String selectOption) {
    this.selectOption = selectOption;
    return this;
  }

  public void unsetSelectOption() {
    this.selectOption = null;
  }

  /** Returns true if field selectOption is set (has been assigned a value) and false otherwise */
  public boolean isSetSelectOption() {
    return this.selectOption != null;
  }

  public void setSelectOptionIsSet(boolean value) {
    if (!value) {
      this.selectOption = null;
    }
  }

  public boolean isDistinct() {
    return this.distinct;
  }

  public TQuery setDistinct(boolean distinct) {
    this.distinct = distinct;
    setDistinctIsSet(true);
    return this;
  }

  public void unsetDistinct() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISTINCT_ISSET_ID);
  }

  /** Returns true if field distinct is set (has been assigned a value) and false otherwise */
  public boolean isSetDistinct() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISTINCT_ISSET_ID);
  }

  public void setDistinctIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISTINCT_ISSET_ID, value);
  }

  public int getFromTableSize() {
    return (this.fromTable == null) ? 0 : this.fromTable.size();
  }

  public java.util.Iterator<java.lang.String> getFromTableIterator() {
    return (this.fromTable == null) ? null : this.fromTable.iterator();
  }

  public void addToFromTable(java.lang.String elem) {
    if (this.fromTable == null) {
      this.fromTable = new java.util.ArrayList<java.lang.String>();
    }
    this.fromTable.add(elem);
  }

  public java.util.List<java.lang.String> getFromTable() {
    return this.fromTable;
  }

  public TQuery setFromTable(java.util.List<java.lang.String> fromTable) {
    this.fromTable = fromTable;
    return this;
  }

  public void unsetFromTable() {
    this.fromTable = null;
  }

  /** Returns true if field fromTable is set (has been assigned a value) and false otherwise */
  public boolean isSetFromTable() {
    return this.fromTable != null;
  }

  public void setFromTableIsSet(boolean value) {
    if (!value) {
      this.fromTable = null;
    }
  }

  public int getGroupBySize() {
    return (this.groupBy == null) ? 0 : this.groupBy.size();
  }

  public java.util.Iterator<java.lang.String> getGroupByIterator() {
    return (this.groupBy == null) ? null : this.groupBy.iterator();
  }

  public void addToGroupBy(java.lang.String elem) {
    if (this.groupBy == null) {
      this.groupBy = new java.util.ArrayList<java.lang.String>();
    }
    this.groupBy.add(elem);
  }

  public java.util.List<java.lang.String> getGroupBy() {
    return this.groupBy;
  }

  public TQuery setGroupBy(java.util.List<java.lang.String> groupBy) {
    this.groupBy = groupBy;
    return this;
  }

  public void unsetGroupBy() {
    this.groupBy = null;
  }

  /** Returns true if field groupBy is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupBy() {
    return this.groupBy != null;
  }

  public void setGroupByIsSet(boolean value) {
    if (!value) {
      this.groupBy = null;
    }
  }

  public java.lang.String getJoin() {
    return this.join;
  }

  public TQuery setJoin(java.lang.String join) {
    this.join = join;
    return this;
  }

  public void unsetJoin() {
    this.join = null;
  }

  /** Returns true if field join is set (has been assigned a value) and false otherwise */
  public boolean isSetJoin() {
    return this.join != null;
  }

  public void setJoinIsSet(boolean value) {
    if (!value) {
      this.join = null;
    }
  }

  public java.lang.String getHaving() {
    return this.having;
  }

  public TQuery setHaving(java.lang.String having) {
    this.having = having;
    return this;
  }

  public void unsetHaving() {
    this.having = null;
  }

  /** Returns true if field having is set (has been assigned a value) and false otherwise */
  public boolean isSetHaving() {
    return this.having != null;
  }

  public void setHavingIsSet(boolean value) {
    if (!value) {
      this.having = null;
    }
  }

  public java.lang.String getUnions() {
    return this.unions;
  }

  public TQuery setUnions(java.lang.String unions) {
    this.unions = unions;
    return this;
  }

  public void unsetUnions() {
    this.unions = null;
  }

  /** Returns true if field unions is set (has been assigned a value) and false otherwise */
  public boolean isSetUnions() {
    return this.unions != null;
  }

  public void setUnionsIsSet(boolean value) {
    if (!value) {
      this.unions = null;
    }
  }

  public int getParamsSize() {
    return (this.params == null) ? 0 : this.params.size();
  }

  public void putToParams(java.lang.String key, java.lang.String val) {
    if (this.params == null) {
      this.params = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.params.put(key, val);
  }

  public java.util.Map<java.lang.String,java.lang.String> getParams() {
    return this.params;
  }

  public TQuery setParams(java.util.Map<java.lang.String,java.lang.String> params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case WHERE:
      if (value == null) {
        unsetWhere();
      } else {
        setWhere((java.lang.String)value);
      }
      break;

    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((java.lang.Integer)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((java.lang.Integer)value);
      }
      break;

    case ORDER_BY:
      if (value == null) {
        unsetOrderBy();
      } else {
        setOrderBy((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case SELECT:
      if (value == null) {
        unsetSelect();
      } else {
        setSelect((java.util.List<java.lang.String>)value);
      }
      break;

    case SELECT_OPTION:
      if (value == null) {
        unsetSelectOption();
      } else {
        setSelectOption((java.lang.String)value);
      }
      break;

    case DISTINCT:
      if (value == null) {
        unsetDistinct();
      } else {
        setDistinct((java.lang.Boolean)value);
      }
      break;

    case FROM_TABLE:
      if (value == null) {
        unsetFromTable();
      } else {
        setFromTable((java.util.List<java.lang.String>)value);
      }
      break;

    case GROUP_BY:
      if (value == null) {
        unsetGroupBy();
      } else {
        setGroupBy((java.util.List<java.lang.String>)value);
      }
      break;

    case JOIN:
      if (value == null) {
        unsetJoin();
      } else {
        setJoin((java.lang.String)value);
      }
      break;

    case HAVING:
      if (value == null) {
        unsetHaving();
      } else {
        setHaving((java.lang.String)value);
      }
      break;

    case UNIONS:
      if (value == null) {
        unsetUnions();
      } else {
        setUnions((java.lang.String)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case WHERE:
      return getWhere();

    case LIMIT:
      return getLimit();

    case OFFSET:
      return getOffset();

    case ORDER_BY:
      return getOrderBy();

    case SELECT:
      return getSelect();

    case SELECT_OPTION:
      return getSelectOption();

    case DISTINCT:
      return isDistinct();

    case FROM_TABLE:
      return getFromTable();

    case GROUP_BY:
      return getGroupBy();

    case JOIN:
      return getJoin();

    case HAVING:
      return getHaving();

    case UNIONS:
      return getUnions();

    case PARAMS:
      return getParams();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case WHERE:
      return isSetWhere();
    case LIMIT:
      return isSetLimit();
    case OFFSET:
      return isSetOffset();
    case ORDER_BY:
      return isSetOrderBy();
    case SELECT:
      return isSetSelect();
    case SELECT_OPTION:
      return isSetSelectOption();
    case DISTINCT:
      return isSetDistinct();
    case FROM_TABLE:
      return isSetFromTable();
    case GROUP_BY:
      return isSetGroupBy();
    case JOIN:
      return isSetJoin();
    case HAVING:
      return isSetHaving();
    case UNIONS:
      return isSetUnions();
    case PARAMS:
      return isSetParams();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TQuery)
      return this.equals((TQuery)that);
    return false;
  }

  public boolean equals(TQuery that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_where = true && this.isSetWhere();
    boolean that_present_where = true && that.isSetWhere();
    if (this_present_where || that_present_where) {
      if (!(this_present_where && that_present_where))
        return false;
      if (!this.where.equals(that.where))
        return false;
    }

    boolean this_present_limit = true;
    boolean that_present_limit = true;
    if (this_present_limit || that_present_limit) {
      if (!(this_present_limit && that_present_limit))
        return false;
      if (this.limit != that.limit)
        return false;
    }

    boolean this_present_offset = true;
    boolean that_present_offset = true;
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_orderBy = true && this.isSetOrderBy();
    boolean that_present_orderBy = true && that.isSetOrderBy();
    if (this_present_orderBy || that_present_orderBy) {
      if (!(this_present_orderBy && that_present_orderBy))
        return false;
      if (!this.orderBy.equals(that.orderBy))
        return false;
    }

    boolean this_present_select = true && this.isSetSelect();
    boolean that_present_select = true && that.isSetSelect();
    if (this_present_select || that_present_select) {
      if (!(this_present_select && that_present_select))
        return false;
      if (!this.select.equals(that.select))
        return false;
    }

    boolean this_present_selectOption = true && this.isSetSelectOption();
    boolean that_present_selectOption = true && that.isSetSelectOption();
    if (this_present_selectOption || that_present_selectOption) {
      if (!(this_present_selectOption && that_present_selectOption))
        return false;
      if (!this.selectOption.equals(that.selectOption))
        return false;
    }

    boolean this_present_distinct = true;
    boolean that_present_distinct = true;
    if (this_present_distinct || that_present_distinct) {
      if (!(this_present_distinct && that_present_distinct))
        return false;
      if (this.distinct != that.distinct)
        return false;
    }

    boolean this_present_fromTable = true && this.isSetFromTable();
    boolean that_present_fromTable = true && that.isSetFromTable();
    if (this_present_fromTable || that_present_fromTable) {
      if (!(this_present_fromTable && that_present_fromTable))
        return false;
      if (!this.fromTable.equals(that.fromTable))
        return false;
    }

    boolean this_present_groupBy = true && this.isSetGroupBy();
    boolean that_present_groupBy = true && that.isSetGroupBy();
    if (this_present_groupBy || that_present_groupBy) {
      if (!(this_present_groupBy && that_present_groupBy))
        return false;
      if (!this.groupBy.equals(that.groupBy))
        return false;
    }

    boolean this_present_join = true && this.isSetJoin();
    boolean that_present_join = true && that.isSetJoin();
    if (this_present_join || that_present_join) {
      if (!(this_present_join && that_present_join))
        return false;
      if (!this.join.equals(that.join))
        return false;
    }

    boolean this_present_having = true && this.isSetHaving();
    boolean that_present_having = true && that.isSetHaving();
    if (this_present_having || that_present_having) {
      if (!(this_present_having && that_present_having))
        return false;
      if (!this.having.equals(that.having))
        return false;
    }

    boolean this_present_unions = true && this.isSetUnions();
    boolean that_present_unions = true && that.isSetUnions();
    if (this_present_unions || that_present_unions) {
      if (!(this_present_unions && that_present_unions))
        return false;
      if (!this.unions.equals(that.unions))
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetWhere()) ? 131071 : 524287);
    if (isSetWhere())
      hashCode = hashCode * 8191 + where.hashCode();

    hashCode = hashCode * 8191 + limit;

    hashCode = hashCode * 8191 + offset;

    hashCode = hashCode * 8191 + ((isSetOrderBy()) ? 131071 : 524287);
    if (isSetOrderBy())
      hashCode = hashCode * 8191 + orderBy.hashCode();

    hashCode = hashCode * 8191 + ((isSetSelect()) ? 131071 : 524287);
    if (isSetSelect())
      hashCode = hashCode * 8191 + select.hashCode();

    hashCode = hashCode * 8191 + ((isSetSelectOption()) ? 131071 : 524287);
    if (isSetSelectOption())
      hashCode = hashCode * 8191 + selectOption.hashCode();

    hashCode = hashCode * 8191 + ((distinct) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetFromTable()) ? 131071 : 524287);
    if (isSetFromTable())
      hashCode = hashCode * 8191 + fromTable.hashCode();

    hashCode = hashCode * 8191 + ((isSetGroupBy()) ? 131071 : 524287);
    if (isSetGroupBy())
      hashCode = hashCode * 8191 + groupBy.hashCode();

    hashCode = hashCode * 8191 + ((isSetJoin()) ? 131071 : 524287);
    if (isSetJoin())
      hashCode = hashCode * 8191 + join.hashCode();

    hashCode = hashCode * 8191 + ((isSetHaving()) ? 131071 : 524287);
    if (isSetHaving())
      hashCode = hashCode * 8191 + having.hashCode();

    hashCode = hashCode * 8191 + ((isSetUnions()) ? 131071 : 524287);
    if (isSetUnions())
      hashCode = hashCode * 8191 + unions.hashCode();

    hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
    if (isSetParams())
      hashCode = hashCode * 8191 + params.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TQuery other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetWhere()).compareTo(other.isSetWhere());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWhere()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.where, other.where);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOrderBy()).compareTo(other.isSetOrderBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderBy, other.orderBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSelect()).compareTo(other.isSetSelect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.select, other.select);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSelectOption()).compareTo(other.isSetSelectOption());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelectOption()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selectOption, other.selectOption);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDistinct()).compareTo(other.isSetDistinct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistinct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distinct, other.distinct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFromTable()).compareTo(other.isSetFromTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromTable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromTable, other.fromTable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGroupBy()).compareTo(other.isSetGroupBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupBy, other.groupBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJoin()).compareTo(other.isSetJoin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.join, other.join);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHaving()).compareTo(other.isSetHaving());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHaving()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.having, other.having);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUnions()).compareTo(other.isSetUnions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unions, other.unions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TQuery(");
    boolean first = true;

    sb.append("where:");
    if (this.where == null) {
      sb.append("null");
    } else {
      sb.append(this.where);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("limit:");
    sb.append(this.limit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("offset:");
    sb.append(this.offset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderBy:");
    if (this.orderBy == null) {
      sb.append("null");
    } else {
      sb.append(this.orderBy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("select:");
    if (this.select == null) {
      sb.append("null");
    } else {
      sb.append(this.select);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("selectOption:");
    if (this.selectOption == null) {
      sb.append("null");
    } else {
      sb.append(this.selectOption);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("distinct:");
    sb.append(this.distinct);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromTable:");
    if (this.fromTable == null) {
      sb.append("null");
    } else {
      sb.append(this.fromTable);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupBy:");
    if (this.groupBy == null) {
      sb.append("null");
    } else {
      sb.append(this.groupBy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("join:");
    if (this.join == null) {
      sb.append("null");
    } else {
      sb.append(this.join);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("having:");
    if (this.having == null) {
      sb.append("null");
    } else {
      sb.append(this.having);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unions:");
    if (this.unions == null) {
      sb.append("null");
    } else {
      sb.append(this.unions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("params:");
    if (this.params == null) {
      sb.append("null");
    } else {
      sb.append(this.params);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TQueryStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TQueryStandardScheme getScheme() {
      return new TQueryStandardScheme();
    }
  }

  private static class TQueryStandardScheme extends org.apache.thrift.scheme.StandardScheme<TQuery> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TQuery struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WHERE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.where = iprot.readString();
              struct.setWhereIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limit = iprot.readI32();
              struct.setLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.offset = iprot.readI32();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORDER_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.orderBy = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map0.size);
                java.lang.String _key1;
                java.lang.String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.orderBy.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setOrderByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SELECT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                struct.select = new java.util.ArrayList<java.lang.String>(_list4.size);
                java.lang.String _elem5;
                for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                {
                  _elem5 = iprot.readString();
                  struct.select.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setSelectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SELECT_OPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.selectOption = iprot.readString();
              struct.setSelectOptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DISTINCT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.distinct = iprot.readBool();
              struct.setDistinctIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FROM_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list7 = iprot.readListBegin();
                struct.fromTable = new java.util.ArrayList<java.lang.String>(_list7.size);
                java.lang.String _elem8;
                for (int _i9 = 0; _i9 < _list7.size; ++_i9)
                {
                  _elem8 = iprot.readString();
                  struct.fromTable.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setFromTableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // GROUP_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.groupBy = new java.util.ArrayList<java.lang.String>(_list10.size);
                java.lang.String _elem11;
                for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                {
                  _elem11 = iprot.readString();
                  struct.groupBy.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setGroupByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // JOIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.join = iprot.readString();
              struct.setJoinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HAVING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.having = iprot.readString();
              struct.setHavingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // UNIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unions = iprot.readString();
              struct.setUnionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map13 = iprot.readMapBegin();
                struct.params = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map13.size);
                java.lang.String _key14;
                java.lang.String _val15;
                for (int _i16 = 0; _i16 < _map13.size; ++_i16)
                {
                  _key14 = iprot.readString();
                  _val15 = iprot.readString();
                  struct.params.put(_key14, _val15);
                }
                iprot.readMapEnd();
              }
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TQuery struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.where != null) {
        oprot.writeFieldBegin(WHERE_FIELD_DESC);
        oprot.writeString(struct.where);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LIMIT_FIELD_DESC);
      oprot.writeI32(struct.limit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OFFSET_FIELD_DESC);
      oprot.writeI32(struct.offset);
      oprot.writeFieldEnd();
      if (struct.orderBy != null) {
        oprot.writeFieldBegin(ORDER_BY_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.orderBy.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter17 : struct.orderBy.entrySet())
          {
            oprot.writeString(_iter17.getKey());
            oprot.writeString(_iter17.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.select != null) {
        oprot.writeFieldBegin(SELECT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.select.size()));
          for (java.lang.String _iter18 : struct.select)
          {
            oprot.writeString(_iter18);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.selectOption != null) {
        oprot.writeFieldBegin(SELECT_OPTION_FIELD_DESC);
        oprot.writeString(struct.selectOption);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DISTINCT_FIELD_DESC);
      oprot.writeBool(struct.distinct);
      oprot.writeFieldEnd();
      if (struct.fromTable != null) {
        oprot.writeFieldBegin(FROM_TABLE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.fromTable.size()));
          for (java.lang.String _iter19 : struct.fromTable)
          {
            oprot.writeString(_iter19);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.groupBy != null) {
        oprot.writeFieldBegin(GROUP_BY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.groupBy.size()));
          for (java.lang.String _iter20 : struct.groupBy)
          {
            oprot.writeString(_iter20);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.join != null) {
        oprot.writeFieldBegin(JOIN_FIELD_DESC);
        oprot.writeString(struct.join);
        oprot.writeFieldEnd();
      }
      if (struct.having != null) {
        oprot.writeFieldBegin(HAVING_FIELD_DESC);
        oprot.writeString(struct.having);
        oprot.writeFieldEnd();
      }
      if (struct.unions != null) {
        oprot.writeFieldBegin(UNIONS_FIELD_DESC);
        oprot.writeString(struct.unions);
        oprot.writeFieldEnd();
      }
      if (struct.params != null) {
        oprot.writeFieldBegin(PARAMS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter21 : struct.params.entrySet())
          {
            oprot.writeString(_iter21.getKey());
            oprot.writeString(_iter21.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TQueryTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TQueryTupleScheme getScheme() {
      return new TQueryTupleScheme();
    }
  }

  private static class TQueryTupleScheme extends org.apache.thrift.scheme.TupleScheme<TQuery> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TQuery struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetWhere()) {
        optionals.set(0);
      }
      if (struct.isSetLimit()) {
        optionals.set(1);
      }
      if (struct.isSetOffset()) {
        optionals.set(2);
      }
      if (struct.isSetOrderBy()) {
        optionals.set(3);
      }
      if (struct.isSetSelect()) {
        optionals.set(4);
      }
      if (struct.isSetSelectOption()) {
        optionals.set(5);
      }
      if (struct.isSetDistinct()) {
        optionals.set(6);
      }
      if (struct.isSetFromTable()) {
        optionals.set(7);
      }
      if (struct.isSetGroupBy()) {
        optionals.set(8);
      }
      if (struct.isSetJoin()) {
        optionals.set(9);
      }
      if (struct.isSetHaving()) {
        optionals.set(10);
      }
      if (struct.isSetUnions()) {
        optionals.set(11);
      }
      if (struct.isSetParams()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetWhere()) {
        oprot.writeString(struct.where);
      }
      if (struct.isSetLimit()) {
        oprot.writeI32(struct.limit);
      }
      if (struct.isSetOffset()) {
        oprot.writeI32(struct.offset);
      }
      if (struct.isSetOrderBy()) {
        {
          oprot.writeI32(struct.orderBy.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter22 : struct.orderBy.entrySet())
          {
            oprot.writeString(_iter22.getKey());
            oprot.writeString(_iter22.getValue());
          }
        }
      }
      if (struct.isSetSelect()) {
        {
          oprot.writeI32(struct.select.size());
          for (java.lang.String _iter23 : struct.select)
          {
            oprot.writeString(_iter23);
          }
        }
      }
      if (struct.isSetSelectOption()) {
        oprot.writeString(struct.selectOption);
      }
      if (struct.isSetDistinct()) {
        oprot.writeBool(struct.distinct);
      }
      if (struct.isSetFromTable()) {
        {
          oprot.writeI32(struct.fromTable.size());
          for (java.lang.String _iter24 : struct.fromTable)
          {
            oprot.writeString(_iter24);
          }
        }
      }
      if (struct.isSetGroupBy()) {
        {
          oprot.writeI32(struct.groupBy.size());
          for (java.lang.String _iter25 : struct.groupBy)
          {
            oprot.writeString(_iter25);
          }
        }
      }
      if (struct.isSetJoin()) {
        oprot.writeString(struct.join);
      }
      if (struct.isSetHaving()) {
        oprot.writeString(struct.having);
      }
      if (struct.isSetUnions()) {
        oprot.writeString(struct.unions);
      }
      if (struct.isSetParams()) {
        {
          oprot.writeI32(struct.params.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter26 : struct.params.entrySet())
          {
            oprot.writeString(_iter26.getKey());
            oprot.writeString(_iter26.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TQuery struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.where = iprot.readString();
        struct.setWhereIsSet(true);
      }
      if (incoming.get(1)) {
        struct.limit = iprot.readI32();
        struct.setLimitIsSet(true);
      }
      if (incoming.get(2)) {
        struct.offset = iprot.readI32();
        struct.setOffsetIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map27 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.orderBy = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map27.size);
          java.lang.String _key28;
          java.lang.String _val29;
          for (int _i30 = 0; _i30 < _map27.size; ++_i30)
          {
            _key28 = iprot.readString();
            _val29 = iprot.readString();
            struct.orderBy.put(_key28, _val29);
          }
        }
        struct.setOrderByIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.select = new java.util.ArrayList<java.lang.String>(_list31.size);
          java.lang.String _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = iprot.readString();
            struct.select.add(_elem32);
          }
        }
        struct.setSelectIsSet(true);
      }
      if (incoming.get(5)) {
        struct.selectOption = iprot.readString();
        struct.setSelectOptionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.distinct = iprot.readBool();
        struct.setDistinctIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.fromTable = new java.util.ArrayList<java.lang.String>(_list34.size);
          java.lang.String _elem35;
          for (int _i36 = 0; _i36 < _list34.size; ++_i36)
          {
            _elem35 = iprot.readString();
            struct.fromTable.add(_elem35);
          }
        }
        struct.setFromTableIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.groupBy = new java.util.ArrayList<java.lang.String>(_list37.size);
          java.lang.String _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = iprot.readString();
            struct.groupBy.add(_elem38);
          }
        }
        struct.setGroupByIsSet(true);
      }
      if (incoming.get(9)) {
        struct.join = iprot.readString();
        struct.setJoinIsSet(true);
      }
      if (incoming.get(10)) {
        struct.having = iprot.readString();
        struct.setHavingIsSet(true);
      }
      if (incoming.get(11)) {
        struct.unions = iprot.readString();
        struct.setUnionsIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TMap _map40 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.params = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map40.size);
          java.lang.String _key41;
          java.lang.String _val42;
          for (int _i43 = 0; _i43 < _map40.size; ++_i43)
          {
            _key41 = iprot.readString();
            _val42 = iprot.readString();
            struct.params.put(_key41, _val42);
          }
        }
        struct.setParamsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

