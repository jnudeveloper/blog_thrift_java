/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jnudeveloper.blog.thriftgen.domain;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-01-24")
public class TPost implements org.apache.thrift.TBase<TPost, TPost._Fields>, java.io.Serializable, Cloneable, Comparable<TPost> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPost");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("summary", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("update_time", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField AUTHOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("author_id", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField APPROVE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("approve_num", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField COLLECT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("collect_num", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField COMMENT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("comment_num", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPostStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPostTupleSchemeFactory();

  public int id; // required
  public java.lang.String title; // required
  public java.lang.String summary; // required
  public java.lang.String content; // required
  public int status; // required
  public int create_time; // required
  public int update_time; // required
  public int author_id; // required
  public int approve_num; // required
  public int collect_num; // required
  public int comment_num; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TITLE((short)2, "title"),
    SUMMARY((short)3, "summary"),
    CONTENT((short)4, "content"),
    STATUS((short)5, "status"),
    CREATE_TIME((short)6, "create_time"),
    UPDATE_TIME((short)7, "update_time"),
    AUTHOR_ID((short)8, "author_id"),
    APPROVE_NUM((short)9, "approve_num"),
    COLLECT_NUM((short)10, "collect_num"),
    COMMENT_NUM((short)11, "comment_num");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TITLE
          return TITLE;
        case 3: // SUMMARY
          return SUMMARY;
        case 4: // CONTENT
          return CONTENT;
        case 5: // STATUS
          return STATUS;
        case 6: // CREATE_TIME
          return CREATE_TIME;
        case 7: // UPDATE_TIME
          return UPDATE_TIME;
        case 8: // AUTHOR_ID
          return AUTHOR_ID;
        case 9: // APPROVE_NUM
          return APPROVE_NUM;
        case 10: // COLLECT_NUM
          return COLLECT_NUM;
        case 11: // COMMENT_NUM
          return COMMENT_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __CREATE_TIME_ISSET_ID = 2;
  private static final int __UPDATE_TIME_ISSET_ID = 3;
  private static final int __AUTHOR_ID_ISSET_ID = 4;
  private static final int __APPROVE_NUM_ISSET_ID = 5;
  private static final int __COLLECT_NUM_ISSET_ID = 6;
  private static final int __COMMENT_NUM_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("summary", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("create_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("update_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AUTHOR_ID, new org.apache.thrift.meta_data.FieldMetaData("author_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPROVE_NUM, new org.apache.thrift.meta_data.FieldMetaData("approve_num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLLECT_NUM, new org.apache.thrift.meta_data.FieldMetaData("collect_num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMMENT_NUM, new org.apache.thrift.meta_data.FieldMetaData("comment_num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPost.class, metaDataMap);
  }

  public TPost() {
  }

  public TPost(
    int id,
    java.lang.String title,
    java.lang.String summary,
    java.lang.String content,
    int status,
    int create_time,
    int update_time,
    int author_id,
    int approve_num,
    int collect_num,
    int comment_num)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.title = title;
    this.summary = summary;
    this.content = content;
    this.status = status;
    setStatusIsSet(true);
    this.create_time = create_time;
    setCreate_timeIsSet(true);
    this.update_time = update_time;
    setUpdate_timeIsSet(true);
    this.author_id = author_id;
    setAuthor_idIsSet(true);
    this.approve_num = approve_num;
    setApprove_numIsSet(true);
    this.collect_num = collect_num;
    setCollect_numIsSet(true);
    this.comment_num = comment_num;
    setComment_numIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPost(TPost other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetSummary()) {
      this.summary = other.summary;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    this.status = other.status;
    this.create_time = other.create_time;
    this.update_time = other.update_time;
    this.author_id = other.author_id;
    this.approve_num = other.approve_num;
    this.collect_num = other.collect_num;
    this.comment_num = other.comment_num;
  }

  public TPost deepCopy() {
    return new TPost(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.title = null;
    this.summary = null;
    this.content = null;
    setStatusIsSet(false);
    this.status = 0;
    setCreate_timeIsSet(false);
    this.create_time = 0;
    setUpdate_timeIsSet(false);
    this.update_time = 0;
    setAuthor_idIsSet(false);
    this.author_id = 0;
    setApprove_numIsSet(false);
    this.approve_num = 0;
    setCollect_numIsSet(false);
    this.collect_num = 0;
    setComment_numIsSet(false);
    this.comment_num = 0;
  }

  public int getId() {
    return this.id;
  }

  public TPost setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getTitle() {
    return this.title;
  }

  public TPost setTitle(java.lang.String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public java.lang.String getSummary() {
    return this.summary;
  }

  public TPost setSummary(java.lang.String summary) {
    this.summary = summary;
    return this;
  }

  public void unsetSummary() {
    this.summary = null;
  }

  /** Returns true if field summary is set (has been assigned a value) and false otherwise */
  public boolean isSetSummary() {
    return this.summary != null;
  }

  public void setSummaryIsSet(boolean value) {
    if (!value) {
      this.summary = null;
    }
  }

  public java.lang.String getContent() {
    return this.content;
  }

  public TPost setContent(java.lang.String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public TPost setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getCreate_time() {
    return this.create_time;
  }

  public TPost setCreate_time(int create_time) {
    this.create_time = create_time;
    setCreate_timeIsSet(true);
    return this;
  }

  public void unsetCreate_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATE_TIME_ISSET_ID);
  }

  /** Returns true if field create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATE_TIME_ISSET_ID);
  }

  public void setCreate_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATE_TIME_ISSET_ID, value);
  }

  public int getUpdate_time() {
    return this.update_time;
  }

  public TPost setUpdate_time(int update_time) {
    this.update_time = update_time;
    setUpdate_timeIsSet(true);
    return this;
  }

  public void unsetUpdate_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPDATE_TIME_ISSET_ID);
  }

  /** Returns true if field update_time is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdate_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPDATE_TIME_ISSET_ID);
  }

  public void setUpdate_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPDATE_TIME_ISSET_ID, value);
  }

  public int getAuthor_id() {
    return this.author_id;
  }

  public TPost setAuthor_id(int author_id) {
    this.author_id = author_id;
    setAuthor_idIsSet(true);
    return this;
  }

  public void unsetAuthor_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AUTHOR_ID_ISSET_ID);
  }

  /** Returns true if field author_id is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthor_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AUTHOR_ID_ISSET_ID);
  }

  public void setAuthor_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AUTHOR_ID_ISSET_ID, value);
  }

  public int getApprove_num() {
    return this.approve_num;
  }

  public TPost setApprove_num(int approve_num) {
    this.approve_num = approve_num;
    setApprove_numIsSet(true);
    return this;
  }

  public void unsetApprove_num() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __APPROVE_NUM_ISSET_ID);
  }

  /** Returns true if field approve_num is set (has been assigned a value) and false otherwise */
  public boolean isSetApprove_num() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __APPROVE_NUM_ISSET_ID);
  }

  public void setApprove_numIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __APPROVE_NUM_ISSET_ID, value);
  }

  public int getCollect_num() {
    return this.collect_num;
  }

  public TPost setCollect_num(int collect_num) {
    this.collect_num = collect_num;
    setCollect_numIsSet(true);
    return this;
  }

  public void unsetCollect_num() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLLECT_NUM_ISSET_ID);
  }

  /** Returns true if field collect_num is set (has been assigned a value) and false otherwise */
  public boolean isSetCollect_num() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLLECT_NUM_ISSET_ID);
  }

  public void setCollect_numIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLLECT_NUM_ISSET_ID, value);
  }

  public int getComment_num() {
    return this.comment_num;
  }

  public TPost setComment_num(int comment_num) {
    this.comment_num = comment_num;
    setComment_numIsSet(true);
    return this;
  }

  public void unsetComment_num() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMENT_NUM_ISSET_ID);
  }

  /** Returns true if field comment_num is set (has been assigned a value) and false otherwise */
  public boolean isSetComment_num() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMENT_NUM_ISSET_ID);
  }

  public void setComment_numIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMENT_NUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((java.lang.String)value);
      }
      break;

    case SUMMARY:
      if (value == null) {
        unsetSummary();
      } else {
        setSummary((java.lang.String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((java.lang.String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((java.lang.Integer)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdate_time();
      } else {
        setUpdate_time((java.lang.Integer)value);
      }
      break;

    case AUTHOR_ID:
      if (value == null) {
        unsetAuthor_id();
      } else {
        setAuthor_id((java.lang.Integer)value);
      }
      break;

    case APPROVE_NUM:
      if (value == null) {
        unsetApprove_num();
      } else {
        setApprove_num((java.lang.Integer)value);
      }
      break;

    case COLLECT_NUM:
      if (value == null) {
        unsetCollect_num();
      } else {
        setCollect_num((java.lang.Integer)value);
      }
      break;

    case COMMENT_NUM:
      if (value == null) {
        unsetComment_num();
      } else {
        setComment_num((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TITLE:
      return getTitle();

    case SUMMARY:
      return getSummary();

    case CONTENT:
      return getContent();

    case STATUS:
      return getStatus();

    case CREATE_TIME:
      return getCreate_time();

    case UPDATE_TIME:
      return getUpdate_time();

    case AUTHOR_ID:
      return getAuthor_id();

    case APPROVE_NUM:
      return getApprove_num();

    case COLLECT_NUM:
      return getCollect_num();

    case COMMENT_NUM:
      return getComment_num();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TITLE:
      return isSetTitle();
    case SUMMARY:
      return isSetSummary();
    case CONTENT:
      return isSetContent();
    case STATUS:
      return isSetStatus();
    case CREATE_TIME:
      return isSetCreate_time();
    case UPDATE_TIME:
      return isSetUpdate_time();
    case AUTHOR_ID:
      return isSetAuthor_id();
    case APPROVE_NUM:
      return isSetApprove_num();
    case COLLECT_NUM:
      return isSetCollect_num();
    case COMMENT_NUM:
      return isSetComment_num();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TPost)
      return this.equals((TPost)that);
    return false;
  }

  public boolean equals(TPost that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_summary = true && this.isSetSummary();
    boolean that_present_summary = true && that.isSetSummary();
    if (this_present_summary || that_present_summary) {
      if (!(this_present_summary && that_present_summary))
        return false;
      if (!this.summary.equals(that.summary))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_create_time = true;
    boolean that_present_create_time = true;
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (this.create_time != that.create_time)
        return false;
    }

    boolean this_present_update_time = true;
    boolean that_present_update_time = true;
    if (this_present_update_time || that_present_update_time) {
      if (!(this_present_update_time && that_present_update_time))
        return false;
      if (this.update_time != that.update_time)
        return false;
    }

    boolean this_present_author_id = true;
    boolean that_present_author_id = true;
    if (this_present_author_id || that_present_author_id) {
      if (!(this_present_author_id && that_present_author_id))
        return false;
      if (this.author_id != that.author_id)
        return false;
    }

    boolean this_present_approve_num = true;
    boolean that_present_approve_num = true;
    if (this_present_approve_num || that_present_approve_num) {
      if (!(this_present_approve_num && that_present_approve_num))
        return false;
      if (this.approve_num != that.approve_num)
        return false;
    }

    boolean this_present_collect_num = true;
    boolean that_present_collect_num = true;
    if (this_present_collect_num || that_present_collect_num) {
      if (!(this_present_collect_num && that_present_collect_num))
        return false;
      if (this.collect_num != that.collect_num)
        return false;
    }

    boolean this_present_comment_num = true;
    boolean that_present_comment_num = true;
    if (this_present_comment_num || that_present_comment_num) {
      if (!(this_present_comment_num && that_present_comment_num))
        return false;
      if (this.comment_num != that.comment_num)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetSummary()) ? 131071 : 524287);
    if (isSetSummary())
      hashCode = hashCode * 8191 + summary.hashCode();

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + content.hashCode();

    hashCode = hashCode * 8191 + status;

    hashCode = hashCode * 8191 + create_time;

    hashCode = hashCode * 8191 + update_time;

    hashCode = hashCode * 8191 + author_id;

    hashCode = hashCode * 8191 + approve_num;

    hashCode = hashCode * 8191 + collect_num;

    hashCode = hashCode * 8191 + comment_num;

    return hashCode;
  }

  @Override
  public int compareTo(TPost other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSummary()).compareTo(other.isSetSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSummary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.summary, other.summary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreate_time()).compareTo(other.isSetCreate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time, other.create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpdate_time()).compareTo(other.isSetUpdate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.update_time, other.update_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAuthor_id()).compareTo(other.isSetAuthor_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthor_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.author_id, other.author_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetApprove_num()).compareTo(other.isSetApprove_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApprove_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approve_num, other.approve_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCollect_num()).compareTo(other.isSetCollect_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollect_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collect_num, other.collect_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetComment_num()).compareTo(other.isSetComment_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment_num, other.comment_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TPost(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("summary:");
    if (this.summary == null) {
      sb.append("null");
    } else {
      sb.append(this.summary);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("create_time:");
    sb.append(this.create_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("update_time:");
    sb.append(this.update_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("author_id:");
    sb.append(this.author_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("approve_num:");
    sb.append(this.approve_num);
    first = false;
    if (!first) sb.append(", ");
    sb.append("collect_num:");
    sb.append(this.collect_num);
    first = false;
    if (!first) sb.append(", ");
    sb.append("comment_num:");
    sb.append(this.comment_num);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPostStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPostStandardScheme getScheme() {
      return new TPostStandardScheme();
    }
  }

  private static class TPostStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPost> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPost struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.summary = iprot.readString();
              struct.setSummaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.create_time = iprot.readI32();
              struct.setCreate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.update_time = iprot.readI32();
              struct.setUpdate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // AUTHOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.author_id = iprot.readI32();
              struct.setAuthor_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // APPROVE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.approve_num = iprot.readI32();
              struct.setApprove_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COLLECT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.collect_num = iprot.readI32();
              struct.setCollect_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COMMENT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.comment_num = iprot.readI32();
              struct.setComment_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPost struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.summary != null) {
        oprot.writeFieldBegin(SUMMARY_FIELD_DESC);
        oprot.writeString(struct.summary);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.create_time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.update_time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AUTHOR_ID_FIELD_DESC);
      oprot.writeI32(struct.author_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPROVE_NUM_FIELD_DESC);
      oprot.writeI32(struct.approve_num);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COLLECT_NUM_FIELD_DESC);
      oprot.writeI32(struct.collect_num);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMMENT_NUM_FIELD_DESC);
      oprot.writeI32(struct.comment_num);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPostTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPostTupleScheme getScheme() {
      return new TPostTupleScheme();
    }
  }

  private static class TPostTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPost> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPost struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetTitle()) {
        optionals.set(1);
      }
      if (struct.isSetSummary()) {
        optionals.set(2);
      }
      if (struct.isSetContent()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetCreate_time()) {
        optionals.set(5);
      }
      if (struct.isSetUpdate_time()) {
        optionals.set(6);
      }
      if (struct.isSetAuthor_id()) {
        optionals.set(7);
      }
      if (struct.isSetApprove_num()) {
        optionals.set(8);
      }
      if (struct.isSetCollect_num()) {
        optionals.set(9);
      }
      if (struct.isSetComment_num()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetSummary()) {
        oprot.writeString(struct.summary);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetCreate_time()) {
        oprot.writeI32(struct.create_time);
      }
      if (struct.isSetUpdate_time()) {
        oprot.writeI32(struct.update_time);
      }
      if (struct.isSetAuthor_id()) {
        oprot.writeI32(struct.author_id);
      }
      if (struct.isSetApprove_num()) {
        oprot.writeI32(struct.approve_num);
      }
      if (struct.isSetCollect_num()) {
        oprot.writeI32(struct.collect_num);
      }
      if (struct.isSetComment_num()) {
        oprot.writeI32(struct.comment_num);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPost struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.summary = iprot.readString();
        struct.setSummaryIsSet(true);
      }
      if (incoming.get(3)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.create_time = iprot.readI32();
        struct.setCreate_timeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.update_time = iprot.readI32();
        struct.setUpdate_timeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.author_id = iprot.readI32();
        struct.setAuthor_idIsSet(true);
      }
      if (incoming.get(8)) {
        struct.approve_num = iprot.readI32();
        struct.setApprove_numIsSet(true);
      }
      if (incoming.get(9)) {
        struct.collect_num = iprot.readI32();
        struct.setCollect_numIsSet(true);
      }
      if (incoming.get(10)) {
        struct.comment_num = iprot.readI32();
        struct.setComment_numIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

